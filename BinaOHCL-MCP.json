{
  "name": "BinaOHCL-MCP",
  "nodes": [
    {
      "parameters": {
        "path": "3d8bc4d7-0bd2-408b-8c49-de65d3f3c7cb"
      },
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "typeVersion": 2,
      "position": [
        960,
        128
      ],
      "id": "64c49bd0-b76f-44b6-9244-4e5fe420f52f",
      "name": "MCP Server Trigger",
      "webhookId": "3d8bc4d7-0bd2-408b-8c49-de65d3f3c7cb"
    },
    {
      "parameters": {
        "description": "This function converts a given date string in `YYYY-MM-DD` format into the corresponding UTC midnight timestamp in milliseconds (`timeMillis`). If the input is missing or is `\"today\"`, it falls back to the current date in UTC. It returns both the fallback-resolved or original date string and the matching timestamp, allowing precise, timezone-independent date handling in workflows.",
        "jsCode": "\n\nlet inputDate = query;\n\n// If input is empty or \"today\", get current UTC date string\nif (!inputDate || inputDate.toLowerCase() === 'today') {\n  const now = new Date();\n  inputDate = `${now.getUTCFullYear()}-${String(now.getUTCMonth() + 1).padStart(2, '0')}-${String(now.getUTCDate()).padStart(2, '0')}`;\n}\n\n// Convert inputDate to UTC midnight Date object\nconst dateObj = new Date(inputDate + 'T00:00:00Z');\n\n// Get milliseconds timestamp\nconst timeMillis = dateObj.getTime();\n\n// Create output object\nconst output = {\n  dateString: inputDate,\n  timeMillis,\n};\n\n// Return stringified JSON response\nreturn timeMillis;"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        1296,
        352
      ],
      "id": "0251b921-6844-4c59-a02f-ff97822d0367",
      "name": "anchorTime"
    },
    {
      "parameters": {
        "description": "Binance API provides candlestick (kline) data for a specific trading symbol and interval. It is used for fetching historical price data in the classic OHLCV (Open, High, Low, Close, Volume) format, which is commonly used in charting and technical analysis",
        "workflowId": {
          "__rl": true,
          "value": "5OYIIAfhOZKCtBBZ",
          "mode": "list",
          "cachedResultName": "WL-requestBinanceAPI"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "symbol": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('symbol', `The trading pair (e.g., BTCUSDT, XRPUSDT, ETHUSDT, SUIUSDT,...)`, 'string') }}",
            "startTime": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('startTime', \"time in milliseconds (e.g. , 1640908800000). Use `anchorTime` tool to infer\", 'number') }}",
            "endTime": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('endTime', \"time in milliseconds (e.g. , 1735776000000). Use `anchorTime` tool to infer\", 'number') }}",
            "limit": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('limit', `Number of data points to return (Default: 500, Max: 1000)`, 'number') }}",
            "interval": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('interval', `Intervals Supported:\n- Seconds: \\`1s\\`\n- Minutes: \\`1m\\`, \\`3m\\`, \\`5m\\`, \\`15m\\`, \\`30m\\`\n- Hours: \\`1h\\`, \\`2h\\`, \\`4h\\`, \\`6h\\`, \\`8h\\`, \\`12h\\`\n- Days: \\`1d\\`, \\`3d\\`\n- Weeks: \\`1w\\`\n- Months: \\`1M\\``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "symbol",
              "displayName": "symbol",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "interval",
              "displayName": "interval",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "startTime",
              "displayName": "startTime",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "endTime",
              "displayName": "endTime",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            },
            {
              "id": "limit",
              "displayName": "limit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        960,
        352
      ],
      "id": "418f4de4-53b8-46bc-89fc-2ebf685de43a",
      "name": "MCP OHLCV"
    }
  ],
  "pinData": {},
  "connections": {
    "anchorTime": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MCP OHLCV": {
      "ai_tool": [
        [
          {
            "node": "MCP Server Trigger",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "657d3a11-1397-47a6-a7e4-71a200423377",
  "meta": {
    "instanceId": "d32f4f62648a18e310509e0dc150b56a3c56d12b9f692009dc2472de51ce9edb"
  },
  "id": "Y5mrflUdUlh4qWYe",
  "tags": []
}